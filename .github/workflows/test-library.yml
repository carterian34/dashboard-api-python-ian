# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
name: Test Python library

on:
  push:
    branches:
      - 'main'
      - 'release'
    paths-ignore:
      - '.github/**'
      - 'examples/**'
      - 'meraki/aio/**'
      - 'notebooks/**'
      - 'generator/**'
      - 'README.md'
      - 'LICENSE'
      - 'setup.py'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - '.github/**'
      - 'examples/**'
      - 'meraki/aio/**'
      - 'notebooks/**'
      - 'generator/**'
      - 'README.md'
      - 'LICENSE'
      - 'setup.py'
  workflow_dispatch:


jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up pipenv
      uses: actions/cache@v4
      with: 
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pipenv-${{ hashfiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pipenv
        pipenv install --python ${{ matrix.python-version }}
        pipenv install flake8 pytest
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        pipenv run flake8 . --count --select=E9,F63,F7,F82 --ignore=F405,W391,W291,C901,E501,E303,W293 --exclude=examples,generator  --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pipenv run pytest --apikey ${{ secrets.TEST_ORG_API_KEY }} --o ${{ secrets.TEST_ORG_ID }}

